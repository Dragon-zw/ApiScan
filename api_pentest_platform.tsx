import React, { useState } from 'react';
import { Shield, Target, AlertTriangle, CheckCircle, XCircle, Code, FileText, Lock, Key, Database, Download } from 'lucide-react';

export default function APIPentestPlatform() {
  const [activeTab, setActiveTab] = useState('scanner');
  const [targetUrl, setTargetUrl] = useState('');
  const [method, setMethod] = useState('GET');
  const [headers, setHeaders] = useState('');
  const [body, setBody] = useState('');
  const [results, setResults] = useState([]);
  const [isScanning, setIsScanning] = useState(false);

  const vulnerabilityTests = [
    { id: 'sql', name: 'SQL注入检测', payloads: ["' OR '1'='1", "1' OR '1'='1' --", "admin' --"] },
    { id: 'xss', name: 'XSS跨站脚本', payloads: ['<script>alert(1)</script>', '<img src=x onerror=alert(1)>', 'javascript:alert(1)'] },
    { id: 'xxe', name: 'XXE实体注入', payloads: ['<?xml version="1.0"?><!DOCTYPE foo [<!ENTITY xxe SYSTEM "file:///etc/passwd">]><foo>&xxe;</foo>'] },
    { id: 'cmd', name: '命令注入', payloads: ['; ls -la', '| whoami', '&& cat /etc/passwd'] },
    { id: 'path', name: '路径遍历', payloads: ['../../etc/passwd', '..\\..\\windows\\system32\\config\\sam'] },
    { id: 'auth', name: '未授权访问', payloads: ['', 'null', 'Bearer invalid'] },
  ];

  const securityHeaders = [
    'X-Frame-Options',
    'X-Content-Type-Options',
    'Strict-Transport-Security',
    'Content-Security-Policy',
    'X-XSS-Protection',
  ];

  const runSecurityScan = async () => {
    if (!targetUrl) {
      alert('请输入目标URL');
      return;
    }

    setIsScanning(true);
    setResults([]);
    const scanResults = [];

    // 模拟安全扫描
    await new Promise(resolve => setTimeout(resolve, 1000));

    // 检查安全头
    const missingHeaders = securityHeaders.filter(() => Math.random() > 0.5);
    if (missingHeaders.length > 0) {
      scanResults.push({
        type: 'warning',
        category: '安全响应头',
        message: `缺少安全头: ${missingHeaders.join(', ')}`,
        severity: 'medium'
      });
    }

    // 模拟漏洞检测
    vulnerabilityTests.forEach(test => {
      const hasVuln = Math.random() > 0.7;
      if (hasVuln) {
        scanResults.push({
          type: 'danger',
          category: test.name,
          message: `检测到潜在的${test.name}漏洞`,
          severity: 'high',
          payload: test.payloads[0]
        });
      } else {
        scanResults.push({
          type: 'success',
          category: test.name,
          message: `未发现${test.name}漏洞`,
          severity: 'info'
        });
      }
    });

    // SSL/TLS检查
    if (targetUrl.startsWith('http://')) {
      scanResults.push({
        type: 'danger',
        category: 'SSL/TLS',
        message: '未使用HTTPS加密连接',
        severity: 'high'
      });
    }

    setResults(scanResults);
    setIsScanning(false);
  };

  const testPayload = (payload) => {
    const testResult = {
      payload,
      timestamp: new Date().toLocaleTimeString(),
      status: Math.random() > 0.5 ? 'success' : 'failed',
      response: Math.random() > 0.5 ? '200 OK' : '403 Forbidden'
    };

    setResults(prev => [{
      type: testResult.status === 'success' ? 'warning' : 'info',
      category: 'Payload测试',
      message: `Payload: ${payload} - ${testResult.response}`,
      severity: 'info'
    }, ...prev]);
  };

  const getSeverityColor = (severity) => {
    switch (severity) {
      case 'high': return 'text-red-600 bg-red-50';
      case 'medium': return 'text-yellow-600 bg-yellow-50';
      case 'info': return 'text-blue-600 bg-blue-50';
      default: return 'text-gray-600 bg-gray-50';
    }
  };

  const getTypeIcon = (type) => {
    switch (type) {
      case 'danger': return <XCircle className="w-5 h-5 text-red-500" />;
      case 'warning': return <AlertTriangle className="w-5 h-5 text-yellow-500" />;
      case 'success': return <CheckCircle className="w-5 h-5 text-green-500" />;
      default: return <AlertTriangle className="w-5 h-5 text-blue-500" />;
    }
  };

  // 生成测试报告数据
  const generateReportData = () => {
    const timestamp = new Date().toLocaleString('zh-CN');
    const highCount = results.filter(r => r.severity === 'high').length;
    const mediumCount = results.filter(r => r.severity === 'medium').length;
    const infoCount = results.filter(r => r.severity === 'info').length;
    const successCount = results.filter(r => r.type === 'success').length;

    return {
      reportInfo: {
        title: 'API渗透测试报告',
        generatedAt: timestamp,
        targetUrl: targetUrl,
        method: method,
      },
      summary: {
        totalTests: results.length,
        highRisk: highCount,
        mediumRisk: mediumCount,
        info: infoCount,
        passed: successCount,
      },
      details: results,
      configuration: {
        headers: headers,
        body: body,
      }
    };
  };

  // 下载JSON格式报告
  const downloadJsonReport = () => {
    if (results.length === 0) {
      alert('暂无测试结果，请先进行安全扫描');
      return;
    }

    const reportData = generateReportData();
    const jsonString = JSON.stringify(reportData, null, 2);
    const blob = new Blob([jsonString], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `pentest-report-${Date.now()}.json`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  };

  // 下载HTML格式报告
  const downloadHtmlReport = () => {
    if (results.length === 0) {
      alert('暂无测试结果，请先进行安全扫描');
      return;
    }

    const reportData = generateReportData();
    const htmlContent = `
<!DOCTYPE html>
<html lang="zh-CN">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>${reportData.reportInfo.title}</title>
  <style>
    * { margin: 0; padding: 0; box-sizing: border-box; }
    body { font-family: 'Microsoft YaHei', Arial, sans-serif; background: #f5f5f5; padding: 20px; }
    .container { max-width: 1200px; margin: 0 auto; background: white; padding: 40px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
    .header { text-align: center; border-bottom: 3px solid #8b5cf6; padding-bottom: 20px; margin-bottom: 30px; }
    .header h1 { color: #8b5cf6; font-size: 32px; margin-bottom: 10px; }
    .header p { color: #666; font-size: 14px; }
    .info-section { background: #f9fafb; padding: 20px; border-radius: 6px; margin-bottom: 30px; }
    .info-row { display: flex; margin-bottom: 10px; }
    .info-label { font-weight: bold; color: #374151; width: 120px; }
    .info-value { color: #6b7280; }
    .summary { display: grid; grid-template-columns: repeat(4, 1fr); gap: 20px; margin-bottom: 30px; }
    .summary-card { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 20px; border-radius: 8px; text-align: center; }
    .summary-card.high { background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%); }
    .summary-card.medium { background: linear-gradient(135deg, #ffecd2 0%, #fcb69f 100%); }
    .summary-card.info { background: linear-gradient(135deg, #a8edea 0%, #fed6e3 100%); }
    .summary-card.success { background: linear-gradient(135deg, #d299c2 0%, #fef9d7 100%); }
    .summary-number { font-size: 36px; font-weight: bold; margin-bottom: 5px; }
    .summary-label { font-size: 14px; opacity: 0.9; }
    .results-section h2 { color: #374151; margin-bottom: 20px; font-size: 24px; }
    .result-item { border-left: 4px solid #8b5cf6; background: #f9fafb; padding: 15px; margin-bottom: 15px; border-radius: 4px; }
    .result-item.danger { border-left-color: #ef4444; background: #fef2f2; }
    .result-item.warning { border-left-color: #f59e0b; background: #fffbeb; }
    .result-item.success { border-left-color: #10b981; background: #f0fdf4; }
    .result-header { display: flex; align-items: center; margin-bottom: 8px; }
    .result-category { font-weight: bold; color: #1f2937; margin-right: 10px; }
    .result-severity { display: inline-block; padding: 2px 8px; border-radius: 12px; font-size: 12px; font-weight: 500; }
    .severity-high { background: #fee2e2; color: #991b1b; }
    .severity-medium { background: #fef3c7; color: #92400e; }
    .severity-info { background: #dbeafe; color: #1e40af; }
    .result-message { color: #4b5563; font-size: 14px; line-height: 1.6; }
    .result-payload { background: #1f2937; color: #a78bfa; padding: 10px; border-radius: 4px; margin-top: 10px; font-family: 'Courier New', monospace; font-size: 12px; overflow-x: auto; }
    .footer { text-align: center; margin-top: 40px; padding-top: 20px; border-top: 1px solid #e5e7eb; color: #9ca3af; font-size: 12px; }
  </style>
</head>
<body>
  <div class="container">
    <div class="header">
      <h1>🛡️ ${reportData.reportInfo.title}</h1>
      <p>生成时间: ${reportData.reportInfo.generatedAt}</p>
    </div>

    <div class="info-section">
      <h2 style="color: #374151; margin-bottom: 15px; font-size: 18px;">测试信息</h2>
      <div class="info-row">
        <div class="info-label">目标URL:</div>
        <div class="info-value">${reportData.reportInfo.targetUrl || '未指定'}</div>
      </div>
      <div class="info-row">
        <div class="info-label">HTTP方法:</div>
        <div class="info-value">${reportData.reportInfo.method}</div>
      </div>
      <div class="info-row">
        <div class="info-label">测试项目:</div>
        <div class="info-value">${reportData.summary.totalTests} 项</div>
      </div>
    </div>

    <div class="summary">
      <div class="summary-card high">
        <div class="summary-number">${reportData.summary.highRisk}</div>
        <div class="summary-label">高危漏洞</div>
      </div>
      <div class="summary-card medium">
        <div class="summary-number">${reportData.summary.mediumRisk}</div>
        <div class="summary-label">中危漏洞</div>
      </div>
      <div class="summary-card info">
        <div class="summary-number">${reportData.summary.info}</div>
        <div class="summary-label">信息提示</div>
      </div>
      <div class="summary-card success">
        <div class="summary-number">${reportData.summary.passed}</div>
        <div class="summary-label">安全检查</div>
      </div>
    </div>

    <div class="results-section">
      <h2>详细结果</h2>
      ${reportData.details.map(result => `
        <div class="result-item ${result.type}">
          <div class="result-header">
            <span class="result-category">${result.category}</span>
            <span class="result-severity severity-${result.severity}">${result.severity}</span>
          </div>
          <div class="result-message">${result.message}</div>
          ${result.payload ? `<div class="result-payload">${result.payload}</div>` : ''}
        </div>
      `).join('')}
    </div>

    <div class="footer">
      <p>⚠️ 本报告仅用于授权的安全测试 | 请遵守当地法律法规</p>
      <p>API渗透测试平台 - 开源安全测试工具</p>
    </div>
  </div>
</body>
</html>
    `;

    const blob = new Blob([htmlContent], { type: 'text/html;charset=utf-8' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `pentest-report-${Date.now()}.html`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-gray-900">
      <div className="container mx-auto px-4 py-8">
        {/* Header */}
        <div className="text-center mb-8">
          <div className="flex items-center justify-center mb-4">
            <Shield className="w-12 h-12 text-purple-400 mr-3" />
            <h1 className="text-4xl font-bold text-white">API渗透测试平台</h1>
          </div>
          <p className="text-gray-300">开源API安全测试与漏洞扫描工具</p>
        </div>

        {/* Navigation Tabs */}
        <div className="flex flex-wrap gap-2 mb-6 bg-gray-800 p-2 rounded-lg">
          <button
            onClick={() => setActiveTab('scanner')}
            className={`flex items-center px-4 py-2 rounded-md transition-all ${activeTab === 'scanner' ? 'bg-purple-600 text-white' : 'text-gray-300 hover:bg-gray-700'
              }`}
          >
            <Target className="w-4 h-4 mr-2" />
            漏洞扫描
          </button>
          <button
            onClick={() => setActiveTab('injection')}
            className={`flex items-center px-4 py-2 rounded-md transition-all ${activeTab === 'injection' ? 'bg-purple-600 text-white' : 'text-gray-300 hover:bg-gray-700'
              }`}
          >
            <Code className="w-4 h-4 mr-2" />
            注入测试
          </button>
          <button
            onClick={() => setActiveTab('auth')}
            className={`flex items-center px-4 py-2 rounded-md transition-all ${activeTab === 'auth' ? 'bg-purple-600 text-white' : 'text-gray-300 hover:bg-gray-700'
              }`}
          >
            <Lock className="w-4 h-4 mr-2" />
            认证测试
          </button>
          <button
            onClick={() => setActiveTab('report')}
            className={`flex items-center px-4 py-2 rounded-md transition-all ${activeTab === 'report' ? 'bg-purple-600 text-white' : 'text-gray-300 hover:bg-gray-700'
              }`}
          >
            <FileText className="w-4 h-4 mr-2" />
            测试报告
          </button>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* Left Panel - Configuration */}
          <div className="lg:col-span-1">
            <div className="bg-gray-800 rounded-lg p-6 shadow-xl">
              <h2 className="text-xl font-bold text-white mb-4 flex items-center">
                <Database className="w-5 h-5 mr-2 text-purple-400" />
                测试配置
              </h2>

              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-300 mb-2">目标URL</label>
                  <input
                    type="text"
                    value={targetUrl}
                    onChange={(e) => setTargetUrl(e.target.value)}
                    placeholder="https://api.example.com/endpoint"
                    className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-300 mb-2">HTTP方法</label>
                  <select
                    value={method}
                    onChange={(e) => setMethod(e.target.value)}
                    className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:ring-2 focus:ring-purple-500"
                  >
                    <option>GET</option>
                    <option>POST</option>
                    <option>PUT</option>
                    <option>DELETE</option>
                    <option>PATCH</option>
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-300 mb-2">请求头 (JSON)</label>
                  <textarea
                    value={headers}
                    onChange={(e) => setHeaders(e.target.value)}
                    placeholder='{"Authorization": "Bearer token"}'
                    className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:ring-2 focus:ring-purple-500 h-20 font-mono text-sm"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-300 mb-2">请求体</label>
                  <textarea
                    value={body}
                    onChange={(e) => setBody(e.target.value)}
                    placeholder='{"key": "value"}'
                    className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:ring-2 focus:ring-purple-500 h-20 font-mono text-sm"
                  />
                </div>

                <button
                  onClick={runSecurityScan}
                  disabled={isScanning}
                  className="w-full bg-gradient-to-r from-purple-600 to-pink-600 text-white py-3 rounded-md hover:from-purple-700 hover:to-pink-700 transition-all font-semibold disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  {isScanning ? '扫描中...' : '开始安全扫描'}
                </button>
              </div>
            </div>

            {/* Vulnerability Tests */}
            {activeTab === 'injection' && (
              <div className="bg-gray-800 rounded-lg p-6 shadow-xl mt-6">
                <h2 className="text-xl font-bold text-white mb-4">快速Payload测试</h2>
                <div className="space-y-2">
                  {vulnerabilityTests.map(test => (
                    <div key={test.id} className="border border-gray-700 rounded p-3">
                      <h3 className="text-sm font-semibold text-purple-400 mb-2">{test.name}</h3>
                      {test.payloads.slice(0, 2).map((payload, idx) => (
                        <button
                          key={idx}
                          onClick={() => testPayload(payload)}
                          className="w-full text-left text-xs bg-gray-700 hover:bg-gray-600 text-gray-300 px-2 py-1 rounded mb-1 font-mono transition-colors"
                        >
                          {payload.length > 40 ? payload.substring(0, 40) + '...' : payload}
                        </button>
                      ))}
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>

          {/* Right Panel - Results */}
          <div className="lg:col-span-2">
            <div className="bg-gray-800 rounded-lg p-6 shadow-xl">
              <h2 className="text-xl font-bold text-white mb-4 flex items-center justify-between">
                <span className="flex items-center">
                  <AlertTriangle className="w-5 h-5 mr-2 text-purple-400" />
                  扫描结果
                </span>
                <div className="flex items-center gap-3">
                  {results.length > 0 && (
                    <>
                      <span className="text-sm text-gray-400">共 {results.length} 项</span>
                      <div className="flex gap-2">
                        <button
                          onClick={downloadJsonReport}
                          className="flex items-center gap-1 px-3 py-1.5 bg-purple-600 hover:bg-purple-700 text-white text-sm rounded-md transition-colors"
                          title="下载JSON格式报告"
                        >
                          <Download className="w-4 h-4" />
                          JSON
                        </button>
                        <button
                          onClick={downloadHtmlReport}
                          className="flex items-center gap-1 px-3 py-1.5 bg-pink-600 hover:bg-pink-700 text-white text-sm rounded-md transition-colors"
                          title="下载HTML格式报告"
                        >
                          <Download className="w-4 h-4" />
                          HTML
                        </button>
                      </div>
                    </>
                  )}
                </div>
              </h2>

              {results.length === 0 ? (
                <div className="text-center py-12">
                  <Shield className="w-16 h-16 text-gray-600 mx-auto mb-4" />
                  <p className="text-gray-400">配置测试参数并点击"开始安全扫描"</p>
                </div>
              ) : (
                <div className="space-y-3 max-h-[600px] overflow-y-auto">
                  {results.map((result, idx) => (
                    <div
                      key={idx}
                      className={`p-4 rounded-lg border-l-4 ${result.type === 'danger' ? 'border-red-500 bg-red-900/20' :
                        result.type === 'warning' ? 'border-yellow-500 bg-yellow-900/20' :
                          result.type === 'success' ? 'border-green-500 bg-green-900/20' :
                            'border-blue-500 bg-blue-900/20'
                        }`}
                    >
                      <div className="flex items-start justify-between">
                        <div className="flex items-start gap-3 flex-1">
                          {getTypeIcon(result.type)}
                          <div className="flex-1">
                            <div className="flex items-center gap-2 mb-1">
                              <span className="font-semibold text-white">{result.category}</span>
                              <span className={`text-xs px-2 py-0.5 rounded ${getSeverityColor(result.severity)}`}>
                                {result.severity}
                              </span>
                            </div>
                            <p className="text-sm text-gray-300">{result.message}</p>
                            {result.payload && (
                              <code className="block mt-2 text-xs bg-gray-900 p-2 rounded text-purple-300 font-mono">
                                {result.payload}
                              </code>
                            )}
                          </div>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>

            {/* Statistics */}
            {results.length > 0 && (
              <div className="grid grid-cols-4 gap-4 mt-6">
                <div className="bg-red-900/30 border border-red-800 rounded-lg p-4">
                  <div className="text-2xl font-bold text-red-400">
                    {results.filter(r => r.severity === 'high').length}
                  </div>
                  <div className="text-xs text-gray-400">高危漏洞</div>
                </div>
                <div className="bg-yellow-900/30 border border-yellow-800 rounded-lg p-4">
                  <div className="text-2xl font-bold text-yellow-400">
                    {results.filter(r => r.severity === 'medium').length}
                  </div>
                  <div className="text-xs text-gray-400">中危漏洞</div>
                </div>
                <div className="bg-blue-900/30 border border-blue-800 rounded-lg p-4">
                  <div className="text-2xl font-bold text-blue-400">
                    {results.filter(r => r.severity === 'info').length}
                  </div>
                  <div className="text-xs text-gray-400">信息提示</div>
                </div>
                <div className="bg-green-900/30 border border-green-800 rounded-lg p-4">
                  <div className="text-2xl font-bold text-green-400">
                    {results.filter(r => r.type === 'success').length}
                  </div>
                  <div className="text-xs text-gray-400">安全检查</div>
                </div>
              </div>
            )}
          </div>
        </div>

        {/* Footer */}
        <div className="mt-8 text-center text-gray-500 text-sm">
          <p>⚠️ 仅用于授权的安全测试 | 请遵守当地法律法规</p>
        </div>
      </div>
    </div>
  );
}